name: Infrastructure Deploy

on:
  workflow_dispatch: # Allow this workflow to be triggered manually through Actions UI
  
  push:
    branches:
    - main # Run when things are pushed to main
    paths:
    - '**.bicep' # Should only run when an infra template changes
    - '**/infrastructure/*.json'
    - '**/infrastructure-deploy.yaml' # or, when this workflow changes
 
jobs:
  deploy-development:
    environment: development
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      KEYVAULTACCESSPOLICYTARGETOBJECTID: ${{ secrets.KEYVAULTACCESSPOLICYTARGETOBJECTID }}
      MLWORKSPACENAME: ${{ secrets.MLWORKSPACENAME }}
      KEYVAULTNAME: ${{ secrets.KEYVAULTNAME }}
      STORAGEACCOUNTNAME: ${{ secrets.STORAGEACCOUNTNAME }}
      COMPUTEINSTANCENAME: ${{ secrets.COMPUTEINSTANCENAME }}
      MLCLUSTERNAME: ${{ secrets.MLCLUSTERNAME }}
      APPINSIGHTSNAME: ${{ secrets.APPINSIGHTSNAME }}
      CONTAINERREGISTRYNAME: ${{ secrets.CONTAINERREGISTRYNAME }}
      DATAFACTORYNAME: ${{ secrets.DATAFACTORYNAME }}
      COMPUTEINSTANCESKU: ${{ secrets.COMPUTEINSTANCESKU }}
      MLCLUSTERSKU: ${{ secrets.MLCLUSTERSKU }}
      MLCLUSTERMINNODECOUNT: ${{ secrets.MLCLUSTERMINNODECOUNT }}
      MLCLUSTERMAXNODECOUNT: ${{ secrets.MLCLUSTERMAXNODECOUNT }}
      MLCOMPUTEASSIGNEDUSER: ${{ secrets.MLCOMPUTEASSIGNEDUSER }}
      DATASTORAGEACCOUNTNAME: ${{ secrets.DATASTORAGEACCOUNTNAME }}
      DATASTORAGECONTAINERNAME: ${{ secrets.DATASTORAGECONTAINERNAME }}
      ADLSBLOBDATASTORENAME: ${{ secrets.ADLSBLOBDATASTORENAME }}
      DATABRICKSWORKSPACENAME: ${{ secrets.DATABRICKSWORKSPACENAME }}
      CREATEMLCOMPUTEINSTANCE: ${{ secrets.CREATEMLCOMPUTEINSTANCE }}
    steps:   
    - name: Checkout
      uses: actions/checkout@v1

    - name: Az CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep template
      run: |
        DEPLOYMENT_NAME="mlops_deploy_$(date '+%F_%H_%M_%S')"
        az deployment group create -g "${{ env.RESOURCE_GROUP_NAME }}" -n $DEPLOYMENT_NAME --template-file $GITHUB_WORKSPACE/infrastructure/main.bicep --parameters keyVaultAccessPolicyTargetObjectId=${{ env.KEYVAULTACCESSPOLICYTARGETOBJECTID }} mlWorkspaceName=${{ env.MLWORKSPACENAME }} keyVaultName=${{ env.KEYVAULTNAME }} storageAccountName=${{ env.STORAGEACCOUNTNAME }} computeInstanceName=${{ env.COMPUTEINSTANCENAME }} mlClusterName=${{ env.MLCLUSTERNAME }} appInsightsName=${{ env.APPINSIGHTSNAME }} containerRegistryName=${{ env.CONTAINERREGISTRYNAME }} dataFactoryName=${{ env.DATAFACTORYNAME }} createMlComputeInstance=${{ env.CREATEMLCOMPUTEINSTANCE }} computeInstanceSku=${{ env.COMPUTEINSTANCESKU }} mlClusterSku=${{ env.MLCLUSTERSKU }} mlClusterMinNodeCount=${{ env.MLCLUSTERMINNODECOUNT}} mlClusterMaxNodeCount=${{ env.MLCLUSTERMAXNODECOUNT }} mlComputeAssignedUser=${{ env.MLCOMPUTEASSIGNEDUSER }} dataStorageAccountName=${{ env.DATASTORAGEACCOUNTNAME }} dataStorageContainerName=${{ env.DATASTORAGECONTAINERNAME }} adlsBlobDataStoreName=${{ env.ADLSBLOBDATASTORENAME }} databricksWorkspaceName=${{ env.DATABRICKSWORKSPACENAME}}
    
    - name: Deploy AML Datastore
      run: |
        DEPLOYMENT_NAME="aml_datastore_$(date '+%F_%H_%M_%S')"
        az deployment group create -g "${{ env.RESOURCE_GROUP_NAME }}" -n $DEPLOYMENT_NAME --template-file $GITHUB_WORKSPACE/infrastructure/aml-datastore.json --parameters amlWorkspaceName=${{ env.MLWORKSPACENAME }} dataStoreName=${{ env.ADLSBLOBDATASTORENAME }} storageAccountName=${{ env.DATASTORAGEACCOUNTNAME }} containerName=${{ env.ADLSBLOBDATASTORENAME }}
  
  # Only deploy with an approval, after dev has deployed
  deploy-production:
    needs: deploy-development
    environment: production
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      KEYVAULTACCESSPOLICYTARGETOBJECTID: ${{ secrets.KEYVAULTACCESSPOLICYTARGETOBJECTID }}
      MLWORKSPACENAME: ${{ secrets.MLWORKSPACENAME }}
      KEYVAULTNAME: ${{ secrets.KEYVAULTNAME }}
      STORAGEACCOUNTNAME: ${{ secrets.STORAGEACCOUNTNAME }}
      COMPUTEINSTANCENAME: ${{ secrets.COMPUTEINSTANCENAME }}
      MLCLUSTERNAME: ${{ secrets.MLCLUSTERNAME }}
      APPINSIGHTSNAME: ${{ secrets.APPINSIGHTSNAME }}
      CONTAINERREGISTRYNAME: ${{ secrets.CONTAINERREGISTRYNAME }}
      DATAFACTORYNAME: ${{ secrets.DATAFACTORYNAME }}
      COMPUTEINSTANCESKU: ${{ secrets.COMPUTEINSTANCESKU }}
      MLCLUSTERSKU: ${{ secrets.MLCLUSTERSKU }}
      MLCLUSTERMINNODECOUNT: ${{ secrets.MLCLUSTERMINNODECOUNT }}
      MLCLUSTERMAXNODECOUNT: ${{ secrets.MLCLUSTERMAXNODECOUNT }}
      MLCOMPUTEASSIGNEDUSER: ${{ secrets.MLCOMPUTEASSIGNEDUSER }}
      DATASTORAGEACCOUNTNAME: ${{ secrets.DATASTORAGEACCOUNTNAME }}
      DATASTORAGECONTAINERNAME: ${{ secrets.DATASTORAGECONTAINERNAME }}
      ADLSBLOBDATASTORENAME: ${{ secrets.ADLSBLOBDATASTORENAME }}
      DATABRICKSWORKSPACENAME: ${{ secrets.DATABRICKSWORKSPACENAME }}
      CREATEMLCOMPUTEINSTANCE: ${{ secrets.CREATEMLCOMPUTEINSTANCE }}      
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Az CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep template
      run: |
        DEPLOYMENT_NAME="mlops_deploy_$(date '+%F_%H_%M_%S')"
        az deployment group create -g "${{ secrets.RESOURCE_GROUP_NAME }}" -n $DEPLOYMENT_NAME --template-file $GITHUB_WORKSPACE/infrastructure/main.bicep --parameters keyVaultAccessPolicyTargetObjectId=${{ env.KEYVAULTACCESSPOLICYTARGETOBJECTID }} mlWorkspaceName=${{ env.MLWORKSPACENAME }} keyVaultName=${{ env.KEYVAULTNAME }} storageAccountName=${{ env.STORAGEACCOUNTNAME }} computeInstanceName=${{ env.COMPUTEINSTANCENAME }} mlClusterName=${{ env.MLCLUSTERNAME }} appInsightsName=${{ env.APPINSIGHTSNAME }} containerRegistryName=${{ env.CONTAINERREGISTRYNAME }} dataFactoryName=${{ env.DATAFACTORYNAME }} createMlComputeInstance=${{ env.CREATEMLCOMPUTEINSTANCE }} computeInstanceSku=${{ env.COMPUTEINSTANCESKU }} mlClusterSku=${{ env.MLCLUSTERSKU }} mlClusterMinNodeCount=${{ env.MLCLUSTERMINNODECOUNT}} mlClusterMaxNodeCount=${{ env.MLCLUSTERMAXNODECOUNT }} mlComputeAssignedUser=${{ env.MLCOMPUTEASSIGNEDUSER }} dataStorageAccountName=${{ env.DATASTORAGEACCOUNTNAME }} dataStorageContainerName=${{ env.DATASTORAGECONTAINERNAME }} adlsBlobDataStoreName=${{ env.ADLSBLOBDATASTORENAME }} databricksWorkspaceName=${{ env.DATABRICKSWORKSPACENAME}}

    - name: Deploy AML Datastore
      run: |
        DEPLOYMENT_NAME="aml_datastore_$(date '+%F_%H_%M_%S')"
        az deployment group create -g "${{ env.RESOURCE_GROUP_NAME }}" -n $DEPLOYMENT_NAME --template-file $GITHUB_WORKSPACE/infrastructure/aml-datastore.json --parameters amlWorkspaceName=${{ env.MLWORKSPACENAME }} dataStoreName=${{ env.ADLSBLOBDATASTORENAME }} storageAccountName=${{ env.DATASTORAGEACCOUNTNAME }} containerName=${{ env.ADLSBLOBDATASTORENAME }}
